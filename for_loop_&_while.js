// for 문

//================================================================================

// #1 초기화식

// 1) for 문 개념

// for(let i = 0; i < 10 ; i++){
//     //for(0 부터 시작할꺼다; (언제 까지?) i가 10보다 작을때 까지; 증감식i++ (i의 값을 변환시키는 용도))
//     // i의 값을 계속 변화를 시키면서 두번째 위치의 기준까지 증감을 멈추게 설정을 하는 것이다.
//     // 멈추게 하는거 설정안하면 무제한으로 설정된다.
//     // 즉, i 값을 계속 바꿔 주면서 i가 종료 조건에 도달할 수 있게 해야된다.
//   console.log("누나!",i)
// }
//반복문 설정으로 인한 출력이 10번 되는 것이다.
//i 를 같이 출력하는 경우 i의 시작을 0으로 설정을 했기 때문에 0 - 9 까지 총 10번 출력이 되는 것이다.

// -------------------------------------------------------------------------------
  
// 2) 1 ~ 10 까지 출력하기

// 방법 1
// for(let i=1; i < 11 ; i++){
//   console.log(i)
// }
// 방법 2
// for(let i=1;i<=10;i++){
//   console.log(i)
// }

// -------------------------------------------------------------------------------

// 3) 짝수를 출력하는 방법

// 문제 참고
// for(let i = 0; i < 10 ; i++){
//   console.log(i)
// }

// 첫번째 경우

// for(let i = 0; i < 10 ; i++){ // for 안에 if문 사용가능하다.
//   if(i%2==0) {// 어떤 수를 2로 나눴는데 딱 떨어지면 짝수다. => 빼박 2의 배수임.
//   console.log(i)
//   }
// }

// 두번째 경우 ==> (두개중) 상대적으로 얘가 좀더 빨리 프린트가 된다.

// for(let i = 0; i < 10 ; i+=2){ // 끝에서 i++ 를 i+=2로 바꾼다. 
//   // i+=2 => i=i+2 // i+=5 => i=i+5 //i+=1 => i=i+1 => i++ (통상적으로 쓰는 것이다.)
//   console.log(i)
// }

// 두개의 답변 같은경우는 각각 필요한 경우가 있다. 
// 그래서 코드를 짤때 "뭐가 가장 효율적일까" 고민을 하고 사용해야 한다. 
// 결과는 같지만 과연 뭐가 더 효율 적일까를 생각해 보는 것도 괜찮은 것이다.

//================================================================================

// #2 이중 for문 [구구단 문제]

// for(let i=2;i<=9;i++){ //for( 구구단의 시작:2단 ; 구구단의 끝단:9단 ; 증감식 설정)
//   for(let j= 1; j <=9;j++){ //for(j는(i하고 달라야 하니까)1부터; 9까지 설정; 증감식 설정)
//     console.log(i+'*'+j+'='+i*j) //따로따로 범위를 설정해서 console에 그대로 반영이 되게 설정한건데
//     // 곱하기를 spring으로 설정하는데 출력이 되면 그대로 곱해지는거 라기 보다는
//     // 그저 *는 스프링대로 그대로 나온거고 실질적으로는 i*j가 된듯히다. 
//     // i와 j는 각각 시작하는 위치에 그대로 반출을 하고
//   }
// }

// for loog(반복문)도 위에처럼 2개 말고 3개,4개,5개 이렇게 돌릴수 있기는 한데
// 컴퓨터 성능에도 않좋아져서 비 권장한다.
// 2중 for loop 도 가끔 쓰기는 하는데 왠만하면 다른거 찾다가 차선책으로 사용되기도 한다.

//================================================================================

// #3 while문 //생각보다 단순한 반복문
// 아까 구구단 했던걸 while 문으로 작성해 보자
// while쓸수 있으면 for loop 쓸수 있고 , for loop에 쓸수 있으면 while문에 쓸 수 있다.  
// while문은 약간 for loop을 분해 해 놓은 느낌?

// let i=2

// while(i<10){
//   console.log("while문 실행",i)
//   i++;
// }

// while문과 foor loop의 차이
// for loop같은 경우에는 내가 정확히 얼만큼 for문을 돌리고 싶은지 범위를 알때 [돌리는 범위를 알때]
// while 문 같은 경우에는 내가 정확히 범위는 셀수는 없는데, 하지만 어떤 순간에 true였다가 false 가 나오는지
// 끝이 어디일지느 모르겠지만, 그냥 체크를 할때 사용하는 것이다. 

//================================================================================

// #4 for loop & array

// for 문과 배열은 찰떡궁합, 떼어낼수 없는 존재
// for 문의 존재 이유가 배열을 위함이기도 함 => 범위가 정해져 있어서인듯.

// let fruit = ["banana","apple","grape", "mango"]

// for(let i=0; i<fruit.length;i++){
//   //.length: 배열에서 주는 속성값중 하나,
//   // length=길이   ** 지금 현재 fruit의 길이 = 4
//   console.log(fruit[i])
// }
